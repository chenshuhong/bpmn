export default {

  // Labels
  'Activate the global connect tool' : '激活全局连接工具',
  'Append {type}': '追加 {type}',
  'Add Lane above': '在上面添加泳道',
  'Divide into two Lanes': '分为两个泳道',
  'Divide into three Lanes': '分为三个泳道',
  'Add Lane below': '在下面添加泳道',
  'Append compensation activity': '追加补偿活动',
  'Change type': '改变类型',
  'Connect using Association': '使用关联连接',
  'Connect using Sequence/MessageFlow or Association': '使用序列/消息流或关联进行连接',
  'Connect using DataInputAssociation': '使用数据关联连接',
  'Remove': '删除',
  'Activate the hand tool': '激活手型工具',
  'Activate the lasso tool': '激活套索工具',
  'Activate the create/remove space tool': '激活创建/删除空间工具',
  'Create expanded SubProcess': '创建扩展子进程',
  'Create IntermediateThrowEvent/BoundaryEvent' : '创建 中间事件/边界事件',
  'Create Pool/Participant': '创建 池/参加者',
  'Parallel Multi Instance': '并行多实例',
  'Sequential Multi Instance': '串行多实例',
  'Loop': '循环',
  'Ad-hoc': 'Ad-hoc',
  'Create {type}': '创建 {type}',
  'Task': '任务',
  'Send Task': '发送任务',
  'Receive Task': '接收任务',
  'User Task': '用户任务',
  'Manual Task': '手动任务',
  'Business Rule Task': '业务规则任务',
  'Service Task': '服务任务',
  'Script Task': '脚本任务',
  'Call Activity': '调用活动',
  'Sub Process (collapsed)': '子流程（折叠）',
  'Start Event': '开始事件',
  'Intermediate Throw Event': '中间抛出事件',
  'End Event': '结束事件',
  'Message Start Event': '消息开始事件',
  'Timer Start Event': '定时器启动事件',
  'Conditional Start Event': '条件开始事件',
  'Signal Start Event': '信号开始事件',
  'Error Start Event': '错误开始事件',
  'Escalation Start Event': '升级开始事件',
  'Compensation Start Event': '补偿开始事件',
  'Message Start Event (non-interrupting)': '消息开始事件 (非人工)',
  'Timer Start Event (non-interrupting)': '定时器开始事件（非人工）',
  'Conditional Start Event (non-interrupting)': '条件开始事件 (非人工)',
  'Signal Start Event (non-interrupting)': '信号开始事件 (非人工)',
  'Escalation Start Event (non-interrupting)': '升级开始事件 (非人工)',
  'Message Intermediate Catch Event': '中间消息捕捉事件',
  'Message Intermediate Throw Event': '中间消息抛出事件',
  'Timer Intermediate Catch Event': '中间定时器捕捉事件',
  'Escalation Intermediate Throw Event': '升级中间抛出事件',
  'Conditional Intermediate Catch Event': '条件中间捕捉事件',
  'Link Intermediate Catch Event': '连接中间捕捉事件',
  'Link Intermediate Throw Event': '连接中间抛出事件',
  'Compensation Intermediate Throw Event': '补偿中间抛出事件',
  'Signal Intermediate Catch Event': '中间信号捕捉事件',
  'Signal Intermediate Throw Event': '中间信号抛出事件',
  'Message End Event': '消息结束事件',
  'Escalation End Event': '升级结束事件',
  'Error End Event': '错误结束事件',
  'Cancel End Event': '取消结束事件',
  'Compensation End Event': '补偿结束事件',
  'Signal End Event': '信号结束事件',
  'Terminate End Event': '终止结束事件',
  'Message Boundary Event': '边界消息事件',
  'Message Boundary Event (non-interrupting)': '边界消息事件 (非人工)',
  'Timer Boundary Event': '边界定时事件',
  'Timer Boundary Event (non-interrupting)': '边界定时事件 (非人工)',
  'Escalation Boundary Event': '升级边界事件',
  'Escalation Boundary Event (non-interrupting)': '升级边界事件 (非人工)',
  'Conditional Boundary Event': '边界条件事件',
  'Conditional Boundary Event (non-interrupting)': '边界条件事件 (非人工)',
  'Error Boundary Event': '边界错误事件',
  'Cancel Boundary Event': '边界取消事件',
  'Signal Boundary Event': '边界信号事件',
  'Signal Boundary Event (non-interrupting)': '边界信号事件 (非人工)',
  'Compensation Boundary Event': '边界补偿事件',
  'Exclusive Gateway': '互斥网关',
  'Parallel Gateway': '并行网关',
  'Inclusive Gateway': '包容性网关',
  'Complex Gateway': '复杂网关',
  'Event based Gateway': '事件网关',
  'Transaction': '交易',
  'Sub Process': '子流程',
  'Event Sub Process': '事件子流程',
  'Collapsed Pool': 'Collapsed Pool',
  'Expanded Pool': '扩展池',

  // Errors
  'no parent for {element} in {parent}': '{element}在{parent}没有父节点',
  'no shape type specified': '没有指定形状类型',
  'flow elements must be children of pools/participants': '流元素必须是池/参与者的子元素',
  'out of bounds release': '越界释放',
  'more than {count} child lanes': '超过{count}子专用道',
  'element required': '需要先有个节点',
  'diagram not part of bpmn:Definitions': '图不是bpmn:Definitions的一部分',
  'no diagram to display': '没有图可以展示',
  'no process or collaboration to display': '没有要显示的过程或协作',
  'element {element} referenced by {referenced}#{property} not yet drawn': '{referenced}#{property}引用的元素{element}尚未绘制',
  'already rendered {element}': '{element}已经渲染',
  'failed to import {element}': '导入{element}失败'
};
